"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml2js_1 = require("xml2js");
function getScheme(config) {
    return typeof config.scheme === 'string' ? config.scheme : null;
}
exports.getScheme = getScheme;
function setScheme(config, manifestDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        let scheme = getScheme(config);
        if (!scheme) {
            return manifestDocument;
        }
        let mainActivity = manifestDocument.manifest.application[0].activity.filter((e) => e['$']['android:name'] === '.MainActivity');
        const schemeTag = `<data android:scheme="${scheme}"/>`;
        const intentFiltersXML = `
  <intent-filter>
    <action android:name="android.intent.action.VIEW"/>
    <category android:name="android.intent.category.DEFAULT"/>
    <category android:name="android.intent.category.BROWSABLE"/>
    ${schemeTag}
  </intent-filter>`;
        const parser = new xml2js_1.Parser();
        const intentFiltersJSON = yield parser.parseStringPromise(intentFiltersXML);
        if ('intent-filter' in mainActivity[0]) {
            mainActivity[0]['intent-filter'] = mainActivity[0]['intent-filter'].concat(intentFiltersJSON['intent-filter']);
        }
        else {
            mainActivity[0]['intent-filter'] = intentFiltersJSON['intent-filter'];
        }
        return manifestDocument;
    });
}
exports.setScheme = setScheme;
function isValidRedirectIntentFilter({ actions, categories, schemes }) {
    return (actions.includes('android.intent.action.VIEW') &&
        !categories.includes('android.intent.category.LAUNCHER'));
}
function propertiesFromIntentFilter(intentFilter) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const actions = (_c = (_b = (_a = intentFilter) === null || _a === void 0 ? void 0 : _a.action) === null || _b === void 0 ? void 0 : _b.map((data) => { var _a, _b; return (_b = (_a = data) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:name']; }), (_c !== null && _c !== void 0 ? _c : []));
    const categories = (_f = (_e = (_d = intentFilter) === null || _d === void 0 ? void 0 : _d.category) === null || _e === void 0 ? void 0 : _e.map((data) => { var _a, _b; return (_b = (_a = data) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:name']; }), (_f !== null && _f !== void 0 ? _f : []));
    const schemes = (_j = (_h = (_g = intentFilter) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.map((data) => { var _a, _b; return (_b = (_a = data) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:scheme']; }), (_j !== null && _j !== void 0 ? _j : []));
    return {
        schemes,
        actions,
        categories,
    };
}
function getSingleTaskIntentFilters(manifestDocument) {
    if (!Array.isArray(manifestDocument.manifest.application))
        return [];
    let outputSchemes = [];
    for (let application of manifestDocument.manifest.application) {
        const { activity } = application;
        let activities = Array.isArray(activity) ? activity : [activity];
        const singleTaskActivities = activities.filter(activity => { var _a, _b; return ((_b = (_a = activity) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:launchMode']) === 'singleTask'; });
        for (const activity of singleTaskActivities) {
            const intentFilters = activity['intent-filter'];
            outputSchemes = outputSchemes.concat(intentFilters);
        }
    }
    return outputSchemes;
}
function getSchemesFromManifest(manifestDocument) {
    let outputSchemes = [];
    const singleTaskIntentFilters = getSingleTaskIntentFilters(manifestDocument);
    for (const intentFilter of singleTaskIntentFilters) {
        const properties = propertiesFromIntentFilter(intentFilter);
        if (isValidRedirectIntentFilter(properties)) {
            outputSchemes.push(properties);
        }
    }
    return outputSchemes.reduce((prev, { schemes }) => [...prev, ...schemes], []);
}
exports.getSchemesFromManifest = getSchemesFromManifest;
function ensureManifestHasValidIntentFilter(manifestDocument) {
    var _a, _b;
    if (!Array.isArray(manifestDocument.manifest.application))
        return false;
    for (let application of manifestDocument.manifest.application) {
        for (let activity of application.activity) {
            if (((_b = (_a = activity) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:launchMode']) === 'singleTask') {
                for (let intentFilter of activity['intent-filter']) {
                    // Parse valid intent filters...
                    const properties = propertiesFromIntentFilter(intentFilter);
                    if (isValidRedirectIntentFilter(properties)) {
                        return true;
                    }
                }
                activity['intent-filter'].push({
                    action: [{ $: { 'android:name': 'android.intent.action.VIEW' } }],
                    category: [
                        { $: { 'android:name': 'android.intent.category.DEFAULT' } },
                        { $: { 'android:name': 'android.intent.category.BROWSABLE' } },
                    ],
                });
                return true;
            }
        }
    }
    return false;
}
exports.ensureManifestHasValidIntentFilter = ensureManifestHasValidIntentFilter;
function hasScheme(scheme, manifestDocument) {
    const schemes = getSchemesFromManifest(manifestDocument);
    return schemes.includes(scheme);
}
exports.hasScheme = hasScheme;
function appendScheme(scheme, manifestDocument) {
    var _a, _b;
    if (!Array.isArray(manifestDocument.manifest.application))
        return manifestDocument;
    for (let application of manifestDocument.manifest.application) {
        for (let activity of application.activity) {
            if (((_b = (_a = activity) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:launchMode']) === 'singleTask') {
                for (let intentFilter of activity['intent-filter']) {
                    const properties = propertiesFromIntentFilter(intentFilter);
                    if (isValidRedirectIntentFilter(properties)) {
                        if (!intentFilter.data)
                            intentFilter.data = [];
                        intentFilter.data.push({
                            $: { 'android:scheme': scheme },
                        });
                    }
                }
                break;
            }
        }
    }
    return manifestDocument;
}
exports.appendScheme = appendScheme;
function removeScheme(scheme, manifestDocument) {
    var _a, _b, _c, _d, _e;
    if (!Array.isArray(manifestDocument.manifest.application))
        return manifestDocument;
    for (let application of manifestDocument.manifest.application) {
        for (let activity of application.activity) {
            if (((_b = (_a = activity) === null || _a === void 0 ? void 0 : _a['$']) === null || _b === void 0 ? void 0 : _b['android:launchMode']) === 'singleTask') {
                for (let intentFilter of activity['intent-filter']) {
                    // Parse valid intent filters...
                    const properties = propertiesFromIntentFilter(intentFilter);
                    if (isValidRedirectIntentFilter(properties)) {
                        for (let dataKey in (_c = intentFilter) === null || _c === void 0 ? void 0 : _c.data) {
                            let data = intentFilter.data[dataKey];
                            if (((_e = (_d = data) === null || _d === void 0 ? void 0 : _d['$']) === null || _e === void 0 ? void 0 : _e['android:scheme']) === scheme) {
                                delete intentFilter.data[dataKey];
                            }
                        }
                    }
                }
                break;
            }
        }
    }
    return manifestDocument;
}
exports.removeScheme = removeScheme;
//# sourceMappingURL=Scheme.js.map