"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const dns_1 = __importDefault(require("dns"));
const url_1 = __importDefault(require("url"));
function getNpmProxy() {
    var _a;
    if (process.env.https_proxy) {
        return _a = process.env.https_proxy, (_a !== null && _a !== void 0 ? _a : null);
    }
    try {
        const httpsProxy = child_process_1.execSync('npm config get https-proxy')
            .toString()
            .trim();
        return httpsProxy !== 'null' ? httpsProxy : null;
    }
    catch (e) {
        return null;
    }
}
function isUrlAvailableAsync(url) {
    return new Promise(resolve => {
        dns_1.default.lookup(url, err => {
            resolve(!err);
        });
    });
}
/**
 * Determine if you should use yarn offline or not.
 */
function isYarnOfflineAsync() {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield isUrlAvailableAsync('registry.yarnpkg.com')) {
            return false;
        }
        const proxy = getNpmProxy();
        if (!proxy) {
            return true;
        }
        const { hostname } = url_1.default.parse(proxy);
        if (!hostname) {
            return true;
        }
        return !(yield isUrlAvailableAsync(hostname));
    });
}
exports.default = isYarnOfflineAsync;
//# sourceMappingURL=isYarnOfflineAsync.js.map