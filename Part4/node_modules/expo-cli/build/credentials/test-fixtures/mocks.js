"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCtxMock = getCtxMock;
exports.testAppCredentials = exports.testPushKeysFromApple = exports.testPushKeyFromApple = exports.testPushKeys = exports.testPushKey = exports.testDistCertsFromApple = exports.testDistCertFromApple = exports.testDistCerts = exports.testDistCert = exports.testProvisioningProfilesFromApple = exports.testProvisioningProfileFromApple = exports.testProvisioningProfiles = exports.testProvisioningProfile = void 0;
const today = new Date();
const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
const testProvisioningProfile = {
  provisioningProfileId: 'test-id'
};
exports.testProvisioningProfile = testProvisioningProfile;
const testProvisioningProfiles = [testProvisioningProfile];
exports.testProvisioningProfiles = testProvisioningProfiles;
const testProvisioningProfileFromApple = {
  name: 'test-name',
  status: 'Active',
  expires: tomorrow,
  distributionMethod: 'test',
  certificates: [],
  provisioningProfileId: testProvisioningProfile.provisioningProfileId
};
exports.testProvisioningProfileFromApple = testProvisioningProfileFromApple;
const testProvisioningProfilesFromApple = [testProvisioningProfileFromApple];
exports.testProvisioningProfilesFromApple = testProvisioningProfilesFromApple;
const testDistCert = {
  id: 1,
  type: 'dist-cert',
  certP12: 'test-p12',
  certPassword: 'test-password',
  distCertSerialNumber: 'test-serial',
  teamId: 'test-team-id'
};
exports.testDistCert = testDistCert;
const testDistCerts = [testDistCert];
exports.testDistCerts = testDistCerts;
const testDistCertFromApple = {
  id: 'test-id',
  status: 'Active',
  created: today.getTime(),
  expires: tomorrow.getTime(),
  serialNumber: testDistCert.distCertSerialNumber
};
exports.testDistCertFromApple = testDistCertFromApple;
const testDistCertsFromApple = [testDistCertFromApple];
exports.testDistCertsFromApple = testDistCertsFromApple;
const testPushKey = {
  id: 1,
  type: 'push-key',
  apnsKeyP8: 'test-p8',
  apnsKeyId: 'test-key-id',
  teamId: 'test-team-id'
};
exports.testPushKey = testPushKey;
const testPushKeys = [testPushKey];
exports.testPushKeys = testPushKeys;
const testPushKeyFromApple = {
  id: testPushKey.apnsKeyId,
  name: 'test-name'
};
exports.testPushKeyFromApple = testPushKeyFromApple;
const testPushKeysFromApple = [testPushKeyFromApple];
exports.testPushKeysFromApple = testPushKeysFromApple;
const testAppCredentials = [{
  experienceName: 'testApp',
  bundleIdentifier: 'test.com.app'
}];
exports.testAppCredentials = testAppCredentials;

function getCtxMock() {
  return {
    ios: {
      getDistCert: jest.fn(),
      createDistCert: jest.fn(() => testDistCert),
      useDistCert: jest.fn(),
      getPushKey: jest.fn(),
      createPushKey: jest.fn(() => testPushKey),
      usePushKey: jest.fn(),
      updateProvisioningProfile: jest.fn(),
      getAppCredentials: jest.fn(() => testAppCredentials),
      getProvisioningProfile: jest.fn(),
      credentials: {
        userCredentials: [...testDistCerts, ...testPushKeys],
        appCredentials: testAppCredentials
      }
    },
    appleCtx: {
      appleId: 'test-id',
      appleIdPassword: 'test-password',
      team: {
        id: 'test-team-id'
      },
      fastlaneSession: 'test-fastlane-session'
    },
    ensureAppleCtx: jest.fn(),
    user: jest.fn(),
    hasAppleCtx: jest.fn(() => true)
  };
}
//# sourceMappingURL=../../__sourcemaps__/credentials/test-fixtures/mocks.js.map
